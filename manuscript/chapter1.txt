# Chapter 1

___What is git___

Designed and developed by Linus Torvalds for Linux kernel development in 2005.
Distributed revision control and source code management (SCM) system 
which emphasis on 
speed
data integrity
support for distributed
non-linear workflows

Getting started-

download and install Git from link below

http://git-scm.com/book/en/Getting-Started-Installing-Git

___Creating git repository___

create directory (let say c:\demo) where you want to create repository and use command-
{git init}

It will initialize your directory as a git repository with a default master branch
now you can use this repository locally and share with people as a remote repository


___display repository status___

{git status}
it will display status which include changes (staged and not changes which are not included in stage)

___Adding files in repository___

3 step process (adding changes, tracking or staging changes, committing changes)

step 1: create a file say test.txt
now check {git status}
it will display file test.txt is untracked

step 2: staging untracked changes
{git add *}		or {git add test.txt}
(* means all , you can specify selective files to add, first check git status to find out added or deleted files)

step 3: committing
{git commit –m “adding my first file to repo”}

now we are done with adding file in repository

___Contributing to remote repository___

Using this local repository as a remote repository where people wants to contribute

Step 1:Cloning repository
I want to use c:\demo repository as a remote repository clone it as a new local repository
create a new repository let say e:\local
and try to clone c:\demo {replicating repository}
{git clone c:\demo} 
it will clone repository as a local repository

so every repository can be served as remote and locally

step 2: Contribute from my local repository to remote repository 
in E:\local\demo
create a file mycontent.txt 
and now I want to contribute this change to remote repository (c:\demo)
so let's commit this change 
{git add mycontent.txt}
{git commit -m "adding my content"}

now check status {git status}
It will show your branch is one commit ahead of origin/master(your remote repo c:\demo)

step 3: Pushing to remote repository
let's try to push this change to remote repository
{git push}
push will fail because in your remote repository(c:\demo) currently you have checked out master branch and you cannot push to the one checked out branch of a repository because it would mess with the user of that repository in a way that will most probably end with loss of data and history. 
But you can push to any other branch of the same repository.

As bare repositories never have any branch checked out, you can always push to any branch of a bare repository.

There are multiple solutions, depending on your needs.

Solution 1: Use a Bare Repostiory
As suggested, if on one machine, you don't need the working directory, you can move to a bare repository. To avoid messing with the repository.

You can simply convert your remote repository to bare repository (there is no working copy in the bare repository - the folder contains only the actual repository data).
Execute the following command in your remote repository folder:
{git config --bool core.bare true} you can set it to false if you again want to use this repo as a working directory
Now you can try {git push} your changes will be pushed to remote repository

Solution 2: Push to a Non-Checked-Out Branch
first you have to set your upstream to new branch you want to create
{git push --set-upstream origin master_copy}
and then use 
{git push}
a new branch master_copy will be create in c:\demo

you can check your origin status using
{git remote show origin}
* remote origin
  Fetch URL: c:\demo
  Push  URL: c:\demo
  HEAD branch: master
  Remote branches:
    master      tracked
    master_copy tracked
  Local branches configured for 'git pull':
    master      merges with remote master
    master_copy merges with remote master_copy
  Local refs configured for 'git push':
    master      pushes to master      (fast-forwardable)
    master_copy pushes to master_copy (up to date)
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
___Working with multiple branch___

concept is -
if you want to make some change create a branch , apply your changes and when done merge it with remote branch to which you want to contribute and then push to that branch

step 1: switch to a branch
switching to a specific branch workig directory
{git checkout <branch_name>}

switch to master branch
{git branch master}

step 2:Create local branch
now i want to create a my personal local branch and want to do some work (adding myPersonalFile.txt)

when you have checked out remote repository branch (master) and when you say 
{git branch mypersonal_branch}
it will create branch from your currently checkoud branch(master)

step 3:Do my work on local branch
let's add myPersonalFile.txt in this branch and commit changes.

to compare two branch to show difference use
{git diff <branch to compare>}
{git diff origin/master}

it will list out all differences (one file added myPersonalFile.txt)

step 3: merging my changes with remote branch
now after working on a personal branch i think i am done with my work and i want to merge my changes in master branch and commit it
switch to master branch
{git branch master}
merge changes from your personal branch to master
{git merge mypersonal_branch}
merging done changes from remote branch and your local changes merged in remote checked out branch

step 4: push my work
git push
 
step 5: clean up
now we can delete mypersonal_branch
git branch -D mypersonal_branch
you cannot delete the branch which you are currently on.



___Deleting remote branch___

To delete a remote branch let say master_copy use
{git push origin :master-copy}
















___Using reset command___

uncommitting last commit
add a commit
now if you want to stash your changes and uncommit
use
git reset remotes/origin/master
and if you just want to delete all changes and point to master
git reset --hard remotes/origin/master

git diff --staged - to show diff after git add command
git add octofamily/octodog.txt
git diff --staged
git reset octofamily/octodog.txt
git checkout -- octodog.txt
 
___Setting up user profile in git___

The first thing you should do when you install Git is to set your user name and e-mail address. 
This is important because every Git commit uses this information, and it’s immutably baked into the commits you pass around:
Show user details
{git config --global user.name}
{git config --global user.email}

Setting global user details {will be applicable all repository you create}
{git config --global user.name "Suthar"}
{git config --global user.email rksuthar19@gmail.com}
  
  
Setting local user details {will be applicable for current repository}
{git config --local user.name "Suthar"}
{git config --local user.email rksuthar19@gmail.com}


___Some Fun___

Checkout commits log-
F:\local\demo>cat | git log --author="suthar" |grep "^commit" |wc -l > author_commits_details.txt